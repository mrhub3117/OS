#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define BUFFER_SIZE 5

int buffer[BUFFER_SIZE];
int in = 0;
int out = 0;

sem_t empty;  
sem_t full;   
pthread_mutex_t mutex;  

int items_to_produce;
int items_to_consume;

void* producer(void* param) {
    int item;
    for (int i = 0; i < items_to_produce; i++) {
        item = rand() % 100;
        sem_wait(&empty);
        pthread_mutex_lock(&mutex); 

     
        buffer[in] = item;
        printf("Producer produced %d\n", item);
        in = (in + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex);  
        sem_post(&full);  

     
    }
    return NULL;
}

void* consumer(void* param) {
    int item;
    for (int i = 0; i < items_to_consume; i++) {
        sem_wait(&full);  
        pthread_mutex_lock(&mutex);  
    
        item = buffer[out];
        printf("Consumer consumed %d\n", item);
        out = (out + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex);  
        sem_post(&empty);  

      
    }
    return NULL;
}

int main() {
    pthread_t tid1, tid2;

    
    printf("Enter the number of items to produce: ");
    scanf("%d", &items_to_produce);
    printf("Enter the number of items to consume: ");
    scanf("%d", &items_to_consume);


    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    pthread_mutex_init(&mutex, NULL);


    pthread_create(&tid1, NULL, producer, NULL);
    pthread_create(&tid2, NULL, consumer, NULL);


    pthread_join(tid1, NULL);
    pthread_join(tid2, NULL);


    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}
