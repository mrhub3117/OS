#include <stdio.h>
#include <stdbool.h>

int main() {
    int P, R;
    printf("Enter the number of processes: ");
    scanf("%d", &P);
    printf("Enter the number of resources: ");
    scanf("%d", &R);

    int processes[P];
    for (int i = 0; i < P; i++) {
        processes[i] = i;
    }

    int avail[R];
    printf("Enter the available resources: ");
    for (int i = 0; i < R; i++) {
        scanf("%d", &avail[i]);
    }

    int max_need[P][R];
    printf("Enter the maximum need matrix:\n");
    for (int i = 0; i < P; i++) {
        for (int j = 0; j < R; j++) {
            scanf("%d", &max_need[i][j]);
        }
    }

    int alloc[P][R];
    printf("Enter the allocation matrix:\n");
    for (int i = 0; i < P; i++) {
        for (int j = 0; j < R; j++) {
            scanf("%d", &alloc[i][j]);
        }
    }

    int need[P][R];
    for (int i = 0; i < P; i++) {
        for (int j = 0; j < R; j++) {
            need[i][j] = max_need[i][j] - alloc[i][j];
        }
    }

    bool finish[P];
    for (int i = 0; i < P; i++) {
        finish[i] = false;
    }

    int safe_seq[P];
    int work[R];
    for (int i = 0; i < R; i++) {
        work[i] = avail[i];
    }

    int count = 0;
    while (count < P) {
        bool found = false;
        for (int p = 0; p < P; p++) {
            if (!finish[p]) {
                int j;
                for (j = 0; j < R; j++) {
                    if (need[p][j] > work[j]) {
                        break;
                    }
                }
                if (j == R) {
                    for (int k = 0; k < R; k++) {
                        work[k] += alloc[p][k];
                    }
                    safe_seq[count++] = p;
                    finish[p] = true;
                    found = true;
                }
            }
        }
        if (!found) {
            printf("System is not in a safe state.\n");
            return 0;
        }
    }

    printf("System is in a safe state.\nSafe sequence is: ");
    for (int i = 0; i < P; i++) {
        printf("%d ", safe_seq[i]);
    }
    printf("\n");

    return 0;
}
